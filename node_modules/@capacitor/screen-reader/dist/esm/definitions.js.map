{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface SpeakOptions {\n  /**\n   * The text to speak.\n   *\n   * @since 1.0.0\n   */\n  value: string;\n\n  /**\n   * The language to speak the text in, as its [ISO 639-1\n   * Code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g.: \"en\").\n   *\n   * This option is only supported on Android.\n   *\n   * @since 1.0.0\n   */\n  language?: string;\n}\n\nexport interface ScreenReaderState {\n  /**\n   * Whether a Screen Reader is currently active.\n   *\n   * @since 1.0.0\n   */\n  value: boolean;\n}\n\nexport type StateChangeListener = (state: ScreenReaderState) => void;\n\nexport interface ScreenReaderPlugin {\n  /**\n   * Whether a Screen Reader is currently active.\n   *\n   * This method is not supported on web (it is not possible to detect Screen\n   * Readers).\n   *\n   * @since 1.0.0\n   */\n  isEnabled(): Promise<{ value: boolean }>;\n\n  /**\n   * Text-to-Speech functionality.\n   *\n   * This function will only work if a Screen Reader is currently active.\n   *\n   * On web, browsers must support the [SpeechSynthesis\n   * API](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis), or\n   * this method will throw an error.\n   *\n   * For more text-to-speech capabilities, please see the [Capacitor Community\n   * Text-to-Speech\n   * plugin](https://github.com/capacitor-community/text-to-speech).\n   *\n   * @since 1.0.0\n   */\n  speak(options: SpeakOptions): Promise<void>;\n\n  /**\n   * Add a listener for when the screen reader is turned on or off.\n   *\n   * This event used to be named `'accessibilityScreenReaderStateChange'`.\n   *\n   * This method is not supported on web (it is not possible to detect Screen\n   * Readers).\n   *\n   * @since 1.0.0\n   */\n  addListener(\n    eventName: 'stateChange',\n    listener: StateChangeListener,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Remove all the listeners that are attached to this plugin.\n   *\n   * @since 1.0.0\n   */\n  removeAllListeners(): Promise<void>;\n}\n\n/**\n * @deprecated Use `SpeakOptions`.\n * @since 1.0.0\n */\nexport type AccessibilitySpeakOptions = SpeakOptions;\n\n/**\n * @deprecated Use `StateChangeListener`.\n * @since 1.0.0\n */\nexport type ScreenReaderStateChangeCallback = StateChangeListener;\n"]}