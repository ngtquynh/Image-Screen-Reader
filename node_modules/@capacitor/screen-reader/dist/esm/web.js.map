{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,eAAgB,SAAQ,SAAS;IAC5C,KAAK,CAAC,SAAS;QACb,MAAM,IAAI,CAAC,WAAW,CAAC,+CAA+C,CAAC,CAAC;IAC1E,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,OAAqB;QAC/B,IAAI,CAAC,CAAC,iBAAiB,IAAI,MAAM,CAAC,EAAE;YAClC,MAAM,IAAI,CAAC,WAAW,CACpB,kDAAkD,CACnD,CAAC;SACH;QAED,MAAM,SAAS,GAAG,IAAI,wBAAwB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAE9D,IAAI,OAAO,CAAC,QAAQ,EAAE;YACpB,SAAS,CAAC,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC;SACnC;QAED,eAAe,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { ScreenReaderPlugin, SpeakOptions } from './definitions';\n\nexport class ScreenReaderWeb extends WebPlugin implements ScreenReaderPlugin {\n  async isEnabled(): Promise<never> {\n    throw this.unavailable('This feature is not available in the browser.');\n  }\n\n  async speak(options: SpeakOptions): Promise<void> {\n    if (!('speechSynthesis' in window)) {\n      throw this.unavailable(\n        'Browser does not support the SpeechSynthesis API',\n      );\n    }\n\n    const utterance = new SpeechSynthesisUtterance(options.value);\n\n    if (options.language) {\n      utterance.lang = options.language;\n    }\n\n    speechSynthesis.speak(utterance);\n  }\n}\n"]}